{"version":3,"sources":["images/miscellaneous/iconmonstr-plus-1.svg","images/miscellaneous/iconmonstr-minus-1.svg","components/header.tsx","components/accordionItem.tsx","components/accordion.tsx","containers/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","className","AccordionItem","props","state","accordionOpen","onClick","setState","this","title","src","minusIcon","plusIcon","children","React","Component","Accordion","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yHAAAA,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,gD,mJCE9BC,G,YAAS,WACpB,OACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,iBAAd,wBACA,wBAAIA,UAAU,oBACZ,0BAAMA,UAAU,0BAAhB,6BACA,0BAAMA,UAAU,0BAAhB,gD,mECEKC,EAAb,YAEE,WAAYC,GAAe,IAAD,8BACxB,4CAAMA,KACDC,MAAQ,CACXC,eAAe,GAHO,EAF5B,sEASY,IAAD,OAMP,OACE,yBAAKJ,UAAU,sBACb,yBAAKA,UAAU,6BAA6BK,QAAS,kBAAM,EAAKC,SAAS,CAACF,eAAgB,EAAKD,MAAMC,kBACnG,4BAAQJ,UAAU,qCAAqCO,KAAKL,MAAMM,OAClE,yBAAKR,UAAU,mCAAmCS,IAAKF,KAAKJ,MAAMC,cAAgBM,IAAYC,OAE/FJ,KAAKJ,MAAMC,eAAiB,yBAAKJ,UAAU,6BACzCO,KAAKL,MAAMU,eAtBtB,GAAmCC,IAAMC,WCR5BC,EAAuB,SAACb,GACnC,OACE,uBAAKF,UAAU,aACZE,EAAMU,WCiBEI,EAhBO,WACpB,OACE,yBAAKhB,UAAU,QACb,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAeQ,MAAM,YACnB,yDAEF,kBAAC,EAAD,CAAeA,MAAM,YACnB,iECHUS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.01351eba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/iconmonstr-plus-1.925bd082.svg\";","module.exports = __webpack_public_path__ + \"static/media/iconmonstr-minus-1.b04340ba.svg\";","import React from \"react\";\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1 className=\"header__title\">Hollywood Handshakes</h1>\r\n      <h2 className=\"header__subtitle\">\r\n        <span className=\"header__subtitle__span\">The definitive collection</span>\r\n        <span className=\"header__subtitle__span\"> of Paul Hollywood's infamous handshakes</span>\r\n      </h2>\r\n    </div>\r\n  )\r\n};\r\n","import React from \"react\";\r\nimport plusIcon from \"../images/miscellaneous/iconmonstr-plus-1.svg\";\r\nimport minusIcon from \"../images/miscellaneous/iconmonstr-minus-1.svg\";\r\ninterface Props {\r\n  title: string;\r\n}\r\n\r\ninterface State {\r\n  accordionOpen: boolean;\r\n}\r\nexport class AccordionItem extends React.Component<Props, State> {\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      accordionOpen: false\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const styles = {\r\n      buttonStyle: {\r\n\r\n      }\r\n    };\r\n    return (\r\n      <div className=\"accordion__section\">\r\n        <div className=\"accordion__section__header\" onClick={() => this.setState({accordionOpen: !this.state.accordionOpen})}>\r\n          <button className=\"accordion__section__header__title\">{this.props.title}</button>\r\n          <img className=\"accordion__section__header__icon\" src={this.state.accordionOpen ? minusIcon : plusIcon}/>\r\n        </div>\r\n        {this.state.accordionOpen && <div className=\"accordion__section__panel\">\r\n          {this.props.children}\r\n        </div>}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nexport const Accordion: React.SFC = (props) => {\r\n  return (\r\n    <div className=\"accordion\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Header} from \"../components/header\";\r\nimport {AccordionItem} from \"../components/accordionItem\";\r\nimport {Accordion} from \"../components/accordion\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"page\">\r\n      <Header/>\r\n      <Accordion>\r\n        <AccordionItem title=\"Season 1\">\r\n          <p>These are some handshakes</p>\r\n        </AccordionItem>\r\n        <AccordionItem title=\"Season 2\">\r\n          <p>These are some more handshakes</p>\r\n        </AccordionItem>\r\n      </Accordion>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}